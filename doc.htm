<!doctype html><html lang=en><head><title>Game Rom Mutator</title>

<meta charset=utf-8>
<meta name=viewport content="width=device-width,initial-scale=1">
<meta name=description content="Mutate ROMs. Unlock secrets, enhance gameplay, and enjoy the classics as never before. Fast, easy, and free software.">

<style>

body{font:16pt sans-serif;background-color:black;color:white}
h1,h2,h3,h4,h5{margin-bottom:0}
p{margin:0 0 4vh 0}
.fine{font:12pt arial}

</style>


</head><body>

<h1>Game Rom Mutator</h1>


<ul>
<li>Unlock secrets!</li>
<li>Enhance gameplay!</li>
<li>See altered colors and graphics</li>
<li>Enjoy classic games as never before!</li>
</ul>


<ul>
<li>Create up to 255 mutated roms at once!</li>
<li>Graphical user interface (GUI) or command line</li>
<li>Works for roms of many different game systems</li>
</ul>


<ul>
<li>Easy to use!</li>
<li>Blazing fast!</li>
<li>Tiny software!</li>
<li>Totally free!</li>
<li>It just works!</li>
</ul>


<ul>
<li>Open source software!</li>
<li>Coded in C and Python!</li>
</ul>



<p>This is totally free software that allows you to create mutated copies of a game rom! The mutations are akin to game genie codes, as they change the game in some way. Most mutations are not helpful. Many mutations cause the game to crash. Others have effects that are not noticeable. But some have effects that are interesting to see, and some may even enhance your gameplay experience. Mutations could hypothetically add new features to games, but the chances are very low, so you would need to try many mutated roms to find such things. Mutations could also unlock or expose secrets in games or simply provide a few minutes of entertainment.

<p>You can use the mutator via either the GUI or the command line. The GUI is coded in Python, and the core program is coded in C for maximum speed. That's the kind of overkill that we love.

<p>You can create up to 255 mutated roms at once, more if you edit the source code. Your original rom file is never modified. The program will overwrite old mutated roms by saving to the same filenames, so be sure to rename or move any mutated roms that you want to keep.


<h2>GUI Usage</h2>

1. Start the GUI program.
<br>
2. Select an uncompressed rom file.
<br>
3. Adjust options as desired.
<br>
4. Click the Go! button to generate roms.
<br>
5. View program output.
<br>
6. Play the games!
<br>
7. Repeat from step 3.


<h3>GUI Options</h3>

<h4>Rate</h4>

<p>If the rate is 1 or greater, it is used as the average count of mutations per rom. If rate is less than 1, it is the chance of any particular byte being mutated. Typical values are 5 or 0.0001. In verbose mode, the program warns you about extreme values. Having too many mutations will reduce the number of usable roms, as every rom will have harmful mutations, so any good mutations will tend to be lost.


<h4>Start at</h4>

<p>Specify an integer byte number to start mutating at, or include the % symbol to specify a percent location in the file, where 0.0% is the start of the file and 100.0% is the end. Along with "End at," this allows you to control which part of the rom is mutated, because some roms might be more apt to crash if mutated at the beginning, or perhaps you only want to mutate the graphics.


<h4>End at</h4>

<p>Specify an integer byte number to end mutating at, or include the % symbol to specify a percent location in the file, where 0.0% is the start of the file and 100.0% is the end. Specify an integer or percent equal to or less than zero to measure from the end of the file.


<h4>Create</h4>

<p>Specify an integer number of mutated roms to generate.


<h2>Command Line Usage</h2>

<pre>
-n number of mutated roms to create
-b at which byte to begin mutating
-B location as percent to begin mutating, overrides -b
-e at which byte to end mutating, <=0 from end of file
-E location as percent to end mutating, overrides -e
-v set verbosity 1 or 0
-r rate of mutation e.g. 0.0001
-c avg mutation count per rom e.g. 5.2, overrides -r
-a append string to file names e.g. "-mutated-%d"
-h or -? for help
</pre>

<h3>Examples</h3>

<p>
./mutate smb.nes -n 10 -c 5.1 -B 1.2 -E 99
<br>
to create 10 mutated copies of smb.nes with an average of 5.1 mutations per rom with the mutated bytes occurring from 1.2% to 99% through the file.

<p>
./mutate smb.nes -n 20 -r 0.001 -b 128 -e 512
<br>
to create 20 mutated copies of smb.nes with a mutation rate of 0.001 with mutations occurring from byte 128 to byte 512 in the file.



<div class=fine>

<h2>Disclaimer</h2>

<p>This software has been tested and used for hours by an experienced developer and seems to be good, solid software that will not malfunction or misbehave in any harmful way, but you agree not to sue if it somehow causes some sort of problem. As developers, we should always try to make sure we release good, safe software, but there can be no warranty for free software, so everyone should try to choose trustworthy developers where possible and examine the code for oneself. Always back up your important files.

<p>Mutations could prevent some roms from working on actual hardware due to the use of checksums, even if they work in emulators. I think many Sega Genesis games employ checksums. Do a bit of research before spending your time or money putting a mutated rom on an actual hardware cartridge. You might be able to fix the problem by changing the checksum to an appropriate value. Yes, it appears there are programs out there that can fix the checksum for you. Maybe someday we'll make this program detect the use of a checksum and fix it for users.

</div>


<h2>Links</h2>

<p><a href="https://github.com/RonAmerica/GameRomMutator">Project homepage on github.com</a>

<p>View the <a href="LICENSE">LICENSE</a> file. This software is released on the MIT license.


<p>It's another awesome creation of W R "Ron" Spain Jr.

<p><a href=/>Home</a>

</body></html>
